<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Performer extends Model
{
    protected $table = 'performer';
    protected $fillabre = ['title'];

    /**-------------------------------------------------------------
     * Роблю звязок між таблицею пісень
     * ----------------------------------------------------------------**/
    public function song()
    {
        return $this->hasMany('App\Models\Song');
    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Витягую всіх виконавців
     * ----------------------------------------------------------------**/
    public function getActive()
    {
        return $this->published()->orderBy('title', 'asc')->paginate(30);
    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Витягую всіх виконавців з лімітом 30
     * ----------------------------------------------------------------**/
    public function getActivePag()
    {
        return $this->published()->paginate(30);
    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Витягую одного виконавця по назві
     * ----------------------------------------------------------------**/
    public function onePerformer($title)
    {
        return $this->where(['active' => '1', 'title' => $title])->firstOrFail();
    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Витягую одного виконавця по id
     * ----------------------------------------------------------------**/
    public function onePerformerId()
    {
        return $this->where(['active' => '1', 'id' => '1'])->firstOrFail();
    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Передаю дані для сортування і сортую список виконавців
     * ----------------------------------------------------------------**/
    public function sortPerformer($sort, $sortBy)
    {
        return $this->published()->orderBy($sort, $sortBy)->get();

    }
    /**-------------------------------------------------------------
     * Витягую виконавців які найбільш переглядають
     * ----------------------------------------------------------------**/
    public function most_popular()
    {
        return $this->published()->orderBy('count_views_performer', 'desc')->take(5)->get();

    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Витягую виконавців які були додані остані
     * ----------------------------------------------------------------**/
    public function last_add()
    {
        return $this->published()->orderBy('created_at', 'desc')->take(5)->get();

    }
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    /**-------------------------------------------------------------
     * Кінець
     * ----------------------------------------------------------------**/
    public function scopePublished($query)
    {

        $query->where(['active' => 1]);

    }

}
